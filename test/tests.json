[
    {
        "name": "Parsing",
        "expr": "15 = 1 + 2 + 3 * 4; 103 = 3 + 10 * 5 + (5 + 5) * 5",
        "result" : "103"
    },
    {
        "name": "Variable propagation test",
        "expr": "a = 2; b = a; c = b; c = 2"
    },
    {
        "name": "Variable propagation test 2",
        "expr": "x = 1; y = x + 10; y"
    },
    {
        "name": "Inequality",
        "expr": "2 != 3"
    },
    {
        "name": "Inequality failed",
        "expr": "2 != 2",
        "result": "void"
    },
    {
        "name": "Application test",
        "expr": "x = show 3; x = \"3\"",
        "result": "\"3\""
    },
    {
        "name": "Function variable test",
        "expr": "f = show; f 3 = \"3\"",
        "result": "\"3\""
    },
    {
        "name": "Identity test",
        "expr": "id = x -> x; id 3 = 3",
        "result": "3"
    },
    {
        "name": "Identity + variable test",
        "expr": "x = 3; id = x -> x; id x = 3",
        "result": "3"
    },
    {
        "name": "Lambda",
        "expr": "id = x -> (x + 2); id 1 = 3",
        "result": "3"
    },
    {
        "name": "Function definition via unapply",
        "expr": "f x = x + 2; f 1 = 3",
        "result": "3"
    },
    {
        "name": "Function definition with 2 arguments",
        "expr": "f x y = x + y; f 1 2 = 3",
        "result": "3"
    },
    {
        "name": "Function definition with 3 arguments",
        "expr": "f x y z = x + y + z; f 1 1 1 = 3",
        "result": "3"
    },
    {
        "name": "Closure environment",
        "expr": "f a = 3; f 5 = 3; a = 1; a = 1",
        "result": "1"
    },
    {
        "name": "Addition unapplication",
        "expr": "f (x + 1) = x; f 4",
        "result": "3"
    },
    {
        "name": "Non-determinism",
        "expr": "(2|3) + 1",
        "result": "(3 | 4)"
    },
    {
        "name": "Non-determinism 2",
        "expr": "1 + (2|3)",
        "result": "(3 | 4)"
    },
    {
        "name": "Closure intersection",
        "expr": "((x -> x) & (3 -> 3)) 3",
        "result": "3"
    },
    {
        "name": "Union and intersection",
        "expr": "(1 | 2) & 2",
        "result": "2"
    },
    {
        "name": "Union and intersection 2",
        "expr": "2 & (2 | 3)",
        "result": "2"
    },
    {
        "name": "Union and intersection 3",
        "expr": "(1 | 2) & (2 | 3)",
        "result": "2"
    },
    {
        "name": "Union and intersection 4",
        "expr": "x = (1 | 2); x & 1",
        "result": "1"
    },
    {
        "name": "Union and intersection 5",
        "expr": "x = (1 | 2); 1 & x",
        "result": "1"
    },
    {
        "name": "Non-determinism with functions",
        "expr": "f x = (g y = 20 + y; g x); f (1|3)",
        "result": "(21 | 23)"
    },
    {
        "name": "Non-determinism with functions 2",
        "expr": "f x = (g y = x + y; g x); f (1|3)",
        "result": "(2 | 6)"
    },
    {
        "name": "Non-determinism variable binding",
        "expr": "y = (100|110); x = (y|1); x+y",
        "result": "(101 | 111 | 200 | 220)"
    },
    {
        "name": "Inequality 2",
        "expr": "x = 2; x != 3",
        "result": "2"
    },
    {
        "name": "any",
        "expr": "{2} any",
        "result": "2"
    },
    {
        "name": "any 2",
        "expr": "x = 2; f x = x + 3; f any",
        "result": "error(\"can't do arithmetic with any\")"
    },
    {
        "name": "Inequality 3",
        "expr": "x = 2; 3 != x",
        "result": "2"
    },
    {
        "name": "Inequality and union",
        "expr": "x = 2; (3|4) != x",
        "result": "2"
    },
    {
        "name": "Inequality and union 2",
        "expr": "x = 2; x != (3|4)",
        "result": "2"
    },
    {
        "name": "Union and intersection 6",
        "expr": "(3|4) & (4|5)",
        "result": "4"
    },
    {
        "name": "Set",
        "expr": "3: {3}",
        "result": "3"
    },
    {
        "name": "Set - wrong",
        "expr": "2: {3}",
        "result": "void"
    },
    {
        "name": "Set 2",
        "expr": "3: {3} & {3}",
        "result": "3"
    },
    {
        "name": "Set 3",
        "expr": "3: {3} & {3|4}",
        "result": "3"
    },
    {
        "name": "Set 3 - wrong",
        "expr": "4: {3} & {3|4}",
        "result": "void"
    },
    {
        "name": "Set 4",
        "expr": "3: {3|5} & {3}",
        "result": "3"
    },
    {
        "name": "Set 4 - wrong",
        "expr": "5: {3|5} & {3}",
        "result": "void"
    },
    {
        "name": "Set 5",
        "expr": "3: {3|5} & {3|1|2}",
        "result": "3"
    },
    {
        "name": "Set 5",
        "expr": "1: {3|5} & {3|1|2}",
        "result": "void"
    },
    {
        "name": "Set 6",
        "expr": "{3|5|2} & {2|3}",
        "result": "{(3 | 2)}"
    },
    {
        "name": "Union equality",
        "expr": "(3 | 2) = (2 | 3)",
        "result": "(3 | 2)"
    },
    {
        "name": "Set equality",
        "expr": "{3 | 2} = {2 | 3}",
        "result": "{(3 | 2)}"
    },
    {
        "name": "Int",
        "expr": "Int 3",
        "result": "3"
    },
    {
        "name": "String type error",
        "expr": "String 3",
        "result": "error(\"type error\")"
    },
    {
        "name": "Int variable",
        "expr": "Int x; x = 3",
        "result": "3"
    },
    {
        "name": "Int variable 2",
        "expr": "x = 3; Int x",
        "result": "3"
    },
    {
        "name": "Int variable intersection",
        "expr": "Int x & 3",
        "result": "3"
    },
    {
        "name": "Int variable intersection 2",
        "expr": "3 & Int x",
        "result": "3"
    },
    {
        "name": "String variable intersection",
        "expr": "String x & 3",
        "result": "void"
    },
    {
        "name": "String variable intersection 2",
        "expr": "3 & String x",
        "result": "void"
    },
    {
        "name": "String type error 2",
        "expr": "String x; x = 3",
        "result": "void"
    },
    {
        "name": "Int lambda",
        "expr": "((x: Int) -> x + 1) 2",
        "result": "3"
    },
    {
        "name": "Int lambda & union",
        "expr": "((x: Int) -> x + 1) (2 | 3)",
        "result": "(3 | 4)"
    },
    {
        "name": "Int function",
        "expr": "f (x: Int) = x + 1; f 2",
        "result": "3"
    },
    {
        "name": "Type alias",
        "expr": "integer = Int; integer x = 3",
        "result": "3"
    },
    {
        "name": "Type alias 2",
        "expr": "integer = Int; f (x: integer) = x + 1; f 2",
        "result": "3"
    },
    {
        "name": "Intersection doesn't change environment",
        "expr": "x = 3; x & 2; x",
        "result": "3"
    },
    {
        "name": "Intersection doesn't change environment 2",
        "expr": "x = 3; 2 & x; x",
        "result": "3"
    },
    {
        "name": "Function reuse",
        "expr": "f = show; show 2; show 3",
        "result": "\"3\""
    },
    {
        "name": "Wild intersection",
        "expr": "(Int & (x -> 3)) 2",
        "result": "3"
    },
    {
        "name": "Funcion declaration",
        "expr": "f x = x",
        "result": "x ->' x"
    },
    {
        "name": "Side effects",
        "expr": "f x = (print \"wrong\")",
        "result": "x ->' (cx::print \"wrong\")"
    },
    {
        "name": "Side effects 2",
        "expr": "f x = (print \"1\"; print \"2\"; print \"3\"); f 1",
        "result": "123cx::unit"
    },
    {
        "name": "Function renaming with argument",
        "expr": "f x = show x; f 3",
        "result": "\"3\""
    }
]