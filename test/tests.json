[
    {
        "name": "Parsing",
        "expr": "10 - 3 + 2",
        "result" : "9"
    },
    {
        "name": "Parsing 2",
        "expr": "15 = 1 + 2 + 3 * 4; 103 = 3 + 10 * 5 + (5 + 5) * 5",
        "result" : "103"
    },
    {
        "name": "Variable propagation test",
        "expr": "a = 2; b = a; c = b; c = 2"
    },
    {
        "name": "Variable propagation test 2",
        "expr": "x = 1; y = x + 10; y"
    },
    {
        "name": "Inequality",
        "expr": "2 != 3"
    },
    {
        "name": "Inequality failed",
        "expr": "2 != 2",
        "result": "Compile error:\n2 is equal to 2"
    },
    {
        "name": "Equality failed",
        "expr": "2 = 3",
        "result": "Compile error:\n2 is not equal to 3"
    },
    {
        "name": "Datatypes",
        "expr": "\"3\" = 3",
        "result": "Compile error:\n\"3\" is not equal to 3"
    },
    {
        "name": "Application test",
        "expr": "x = show 3; x = \"3\"",
        "result": "\"3\""
    },
    {
        "name": "Function variable test",
        "expr": "f = show; f 3 = \"3\"",
        "result": "\"3\""
    },
    {
        "name": "Identity test",
        "expr": "id = x -> x; id 3 = 3",
        "result": "3"
    },
    {
        "name": "Identity + variable test",
        "expr": "x = 3; id = x -> x; id x = 3",
        "result": "3"
    },
    {
        "name": "Nested function call",
        "expr": "g y = y; f x = g x; f 3",
        "result": "3"
    },
    {
        "name": "Nested function call 2",
        "expr": "g y = y + 1; f x = g x; f 2",
        "result": "3"
    },
    {
        "name": "Closure env is closed",
        "expr": "(x -> x) any",
        "result": "any"
    },
    {
        "name": "Shadowing is not allowed",
        "expr": "x = 4; id = x -> x; id 3",
        "result": "Compile error:\ncouldn't apply argument"
    },
    {
        "name": "Lambda",
        "expr": "id = x -> (x + 2); id 1 = 3",
        "result": "3"
    },
    {
        "name": "Function definition via unapply",
        "expr": "f x = x + 2; f 1 = 3",
        "result": "3"
    },
    {
        "name": "Function definition with 2 arguments",
        "expr": "f x y = x + y; f 1 2 = 3",
        "result": "3"
    },
    {
        "name": "Function definition with 3 arguments",
        "expr": "f x y z = x + y + z; f 1 1 1 = 3",
        "result": "3"
    },
    {
        "name": "Closure environment",
        "expr": "f a = 3; f 5 = 3; a = 1; a = 1",
        "result": "1"
    },
    {
        "name": "Equation unapplication",
        "expr": "2 + x = 5",
        "result": "3"
    },
    {
        "name": "Addition unapplication",
        "expr": "f (1 + x) = x; f 4",
        "result": "3"
    },
    {
        "name": "Addition unapplication 2",
        "expr": "f (x + 1) = x; f 4",
        "result": "3"
    },
    {
        "name": "Addition unapplication 3",
        "expr": "2 - x + 1 + 8 = 4",
        "result": "-7"
    },
    {
        "name": "Non-determinism",
        "expr": "(2|3) + 1",
        "result": "(3 | 4)"
    },
    {
        "name": "Non-determinism 2",
        "expr": "1 + (2|3)",
        "result": "(3 | 4)"
    },
    {
        "name": "Closure intersection",
        "expr": "((x -> x) & (3 -> 3)) 3",
        "result": "3"
    },
    {
        "name": "Union and intersection",
        "expr": "(1 | 2) & 2",
        "result": "2"
    },
    {
        "name": "Union and intersection 2",
        "expr": "2 & (2 | 3)",
        "result": "2"
    },
    {
        "name": "Union and intersection 3",
        "expr": "(1 | 2) & (2 | 3)",
        "result": "2"
    },
    {
        "name": "Union and intersection 4",
        "expr": "x = (1 | 2); x & 1",
        "result": "1"
    },
    {
        "name": "Union and intersection 5",
        "expr": "x = (1 | 2); 1 & x",
        "result": "1"
    },
    {
        "name": "Union and intersection 6",
        "expr": "(1 | 2) & (1 | 2 | 3)",
        "result": "(1 | 2)"
    },
    {
        "name": "Union and intersection 7",
        "expr": "(1 | 2 | 3) & (1 | 2)",
        "result": "(1 | 2)"
    },
    {
        "name": "Non-determinism with functions",
        "expr": "f x = (g y = 20 + y; g x); f (1|3)",
        "result": "(21 | 23)"
    },
    {
        "name": "Non-determinism with functions 2",
        "expr": "f x = (g y = x + y; g x); f (1|3)",
        "result": "(2 | 6)"
    },
    {
        "name": "Non-determinism variable binding",
        "expr": "y = (1|2); y + y",
        "result": "(2 | 4)"
    },
    {
        "name": "Non-determinism variable binding 2",
        "expr": "y = (100|110); x = (y|1); (x+y)",
        "result": "(101 | 111 | 200 | 220)"
    },
    {
        "name": "Inequality 2",
        "expr": "x = 2; x != 3",
        "result": "2"
    },
    {
        "name": "any",
        "expr": "{2} any",
        "result": "2"
    },
    {
        "name": "any 2",
        "expr": "x = 2; f x = x + 1; f any",
        "result": "3"
    },
    {
        "name": "Inequality 3",
        "expr": "x = 2; 3 != x",
        "result": "2"
    },
    {
        "name": "Inequality and union",
        "expr": "x = 2; (3|4) != x",
        "result": "2"
    },
    {
        "name": "Inequality and union 2",
        "expr": "x = 2; x != (3|4)",
        "result": "2"
    },
    {
        "name": "Union and intersection 6",
        "expr": "(3|4) & (4|5)",
        "result": "4"
    },
    {
        "name": "Set",
        "expr": "3: {3}",
        "result": "3"
    },
    {
        "name": "Set - wrong",
        "expr": "2: {3}",
        "result": "Compile error:\n3 is not equal to 2"
    },
    {
        "name": "Set 2",
        "expr": "3: {3} & {3}",
        "result": "3"
    },
    {
        "name": "Set 3",
        "expr": "3: {3} & {3|4}",
        "result": "3"
    },
    {
        "name": "Set 3 - wrong",
        "expr": "4: {3} & {3|4}",
        "result": "Compile error:\n3 is not equal to 4"
    },
    {
        "name": "Set 4",
        "expr": "3: {3|5} & {3}",
        "result": "3"
    },
    {
        "name": "Set 4 - wrong",
        "expr": "5: {3|5} & {3}",
        "result": "Compile error:\n3 is not equal to 5"
    },
    {
        "name": "Set 5",
        "expr": "3: {3|5} & {3|1|2}",
        "result": "3"
    },
    {
        "name": "Set 5",
        "expr": "1: {3|5} & {3|1|2}",
        "result": "Compile error:\n3 is not equal to 1"
    },
    {
        "name": "Set 6",
        "expr": "{3|5|2} & {2|3}",
        "result": "{(3 | 2)}"
    },
    {
        "name": "Union equality",
        "expr": "(3 | 2) = (2 | 3)",
        "result": "(3 | 2)"
    },
    {
        "name": "Set equality",
        "expr": "{3 | 2} = {2 | 3}",
        "result": "{(3 | 2)}"
    },
    {
        "name": "Int",
        "expr": "Int 3",
        "result": "3"
    },
    {
        "name": "String type error",
        "expr": "String 3",
        "result": "Compile error:\nexpecting String, got 3"
    },
    {
        "name": "Int variable",
        "expr": "Int x; x = 3",
        "result": "3"
    },
    {
        "name": "Int variable 2",
        "expr": "x = 3; Int x",
        "result": "3"
    },
    {
        "name": "Int variable intersection",
        "expr": "Int x & 3",
        "result": "3"
    },
    {
        "name": "Int variable intersection 2",
        "expr": "3 & Int x",
        "result": "3"
    },
    {
        "name": "String variable intersection",
        "expr": "String x & 3",
        "result": "Compile error:\ncan't correlate 3 and (String any)"
    },
    {
        "name": "String variable intersection 2",
        "expr": "3 & String x",
        "result": "Compile error:\ncan't correlate 3 and (String any)"
    },
    {
        "name": "String type error 2",
        "expr": "String x; x = 3",
        "result": "Compile error:\ncan't correlate 3 and (String any)"
    },
    {
        "name": "Int lambda",
        "expr": "((x: Int) -> x + 1) 2",
        "result": "3"
    },
    {
        "name": "Int lambda & union",
        "expr": "((x: Int) -> x + 1) (2 | 3)",
        "result": "(3 | 4)"
    },
    {
        "name": "Int function",
        "expr": "f (x: Int) = x + 1; f 2",
        "result": "3"
    },
    {
        "name": "Shadowing is not allowed 2",
        "expr": "x = 4; id = (Int x) -> x; id 3",
        "result": "Compile error:\ncouldn't apply argument"
    },
    {
        "name": "Int function wrong type",
        "expr": "f (x: Int) = x; f \"2\"",
        "result": "Compile error:\ncouldn't apply argument"
    },
    {
        "name": "Type alias",
        "expr": "integer = Int; integer x = 3",
        "result": "3"
    },
    {
        "name": "Type alias 2",
        "expr": "integer = Int; f (x: integer) = x + 1; f 2",
        "result": "3"
    },
    {
        "name": "Intersection doesn't corrupt environment",
        "expr": "x = 3; x & 3; x",
        "result": "3"
    },
    {
        "name": "Zero intersection is not allowed",
        "expr": "x = 3; x & 2; x",
        "result": "Compile error:\nincorrect implication"
    },
    {
        "name": "Zero intersection is not allowed 2",
        "expr": "x = 3; 2 & x; x",
        "result": "Compile error:\nincorrect implication"
    },
    {
        "name": "Function reuse",
        "expr": "f = show; show 2; show 3",
        "result": "\"3\""
    },
    {
        "name": "Wild intersection",
        "expr": "(Int & (x -> 3)) 2",
        "result": "3"
    },
    {
        "name": "Function declaration",
        "expr": "f x = x",
        "result": "(x ->' x)"
    },
    {
        "name": "Side effects",
        "expr": "f x = (print \"wrong\")",
        "result": "(x ->' (print \"wrong\"))"
    },
    {
        "name": "Side effects 2",
        "expr": "f x = (print \"1\"; print \"2\"; print \"3\"); f 1",
        "result": "123cx::unit"
    },
    {
        "name": "Side effects 3",
        "expr": "(myFunction (x: Int) = print (show x)); i = 2; myFunction i",
        "result": "2cx::unit"
    },
    {
        "name": "Side effects 4",
        "expr": "i = print \"3\"; (x -> show x) i",
        "result": "33cx::unit"
    },
    {
        "name": "Side effects 5",
        "expr": "i = print \"3\"; (x -> x) i",
        "result": "33cx::unit"
    },
    {
        "name": "Function renaming with argument",
        "expr": "f x = show x; f 3",
        "result": "\"3\""
    },
    {
        "name": "Function type",
        "expr": "(Int -> Int) (1 -> 1)",
        "result": "(1 ->' 1)"
    },
    {
        "name": "Function type 1",
        "expr": "(Int -> Int) (\"1\" -> 1)",
        "result": "Compile error:\nexpecting Int, got \"1\"\ncan't match function type"
    },
    {
        "name": "Function type 2",
        "expr": "(Int -> Int) (1 -> \"1\")",
        "result": "Compile error:\nexpecting Int, got \"1\"\ncan't match function type"
    },
    {
        "name": "Function type 3",
        "expr": "(1 -> 1) (Int -> Int)",
        "result": "Compile error:\ncan't apply 1 to Int\ncan't match function type"
    },
    {
        "name": "Function type 4",
        "expr": "(Int -> Int) f; f x = 3; f 2",
        "result": "3"
    },
    {
        "name": "Function type 4.1",
        "expr": "(Int -> Int) f; f (Int x) = 3; f 2",
        "result": "3"
    },
    {
        "name": "Function type 4.2",
        "expr": "integer = Int; (Int -> Int) f; f (integer x) = 3; f 2",
        "result": "3"
    },
    {
        "name": "Function type 5",
        "expr": "(Int -> Int) f; f x = 3; f \"2\"",
        "result": "Compile error:\ncouldn't apply argument\nincorrect implication"
    },
    {
        "name": "Function type 5.1",
        "expr": "f = (x -> 3); (Int -> Int) f; f \"2\"",
        "result": "Compile error:\ncouldn't apply argument\nincorrect implication"
    },
    {
        "name": "Function type 6",
        "expr": "(Int -> Int) f; f x = \"2\"",
        "result": "Compile error:\ncouldn't apply argument\nincorrect implication"
    }
]